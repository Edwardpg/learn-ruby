Campo Text e Campo String Banco de dados:
  Text = Mais de 1 linha

  String = Apenas 1 linha (256 caracteres)
- Model sempre Singular
  Subject, Question

- Gerando um novo app com um banco de dados específico
rails new (nome_app) -d (banco_dados)
rails new market_place -d postgresql

- Gerando um novo controller junto com uma ação
rails (generate ou g) controller (nome_controller) (nome_acao)
rails g controller welcome index

- Removendo um controller
rails (d ou destroy) controller (nome_controller)
rails d controller welcome

- Criar ou definir uma rota padrão
config/routes.rb
 root to:'(nome_controller#nome_ação)'
 root to: 'welcome#index'

- Também podemos dizer para uma determinada rota redirecionar para outro lugar
 get (nome_rota), to: '(nome_controller#nome_ação)'
 get 'inicio', to: 'welcome#index'

- Criando um novo app sem os testes
rails new (nome_app) -T
Sempre que fazer isso lembrar de fazer os devidos ajustes em config/application.rb, pegar os requires e também adicionar a linha que desabilita a criação dos testes com a task generate

- Rails utiliza o spring por trás da aplicação, podes ser uma execução do mesmo em segundo plano ou pré compilação, sempre que for feito alguma alteração é necessário reiniciar tal aplicação
spring status (verificar o status do spring)
spring stop (para o spring da aplicação)

- Colocando uma autenticação básica em HTTP
http_basic_authenticate_with name: 'edward', password: '123'

- Para fazer autenticação do usuário passamos a utilizar uma gem chamada Devise
Todas informações necessárias está centralizada no repositório (https://github.com/plataformatec/devise#getting-started)
 1: Instalar gem ; 2: Rodar rails g devise:install ; 3: Define localhost:3000 para grupo develpoment (config/environments/development)
 4: Em config/initializers/devise.rb adicionar (config.scoped_views = true) caso haja necessidade de fazer views separadamente
 5: Migrar elas (rails db:migrate)

- Deixar a aplicação multi idioma (gem i18n)
Todas informações necessárias está centralizada no repositório (https://github.com/svenfuchs/rails-i18n)

- Flash traduzidas pela i18n (isso resulta somente nos erros das views)
va para views/admins/sessions/new.html.erb

- Criei um arquivo chamado models.pt-BR, para fazer as traduções dos models
Consigo saber quais campos a serem traduzidos pelo schema ou as migrations (db/migrate ou db/scheema.rb)

- Criar subpastas com a hierarquia correta para os devises
rails g controller (nome_pasta)/(nome_controller) (acao)
rails g controller admins_backoffice/welcome index

- Para determinar outro redirecionamento basta alterarmos a herança dentro do controller e com isso adicionar o layout correto para seu controller específico
layou 'admins_backoffice' - Pai
class AdminsBackoffice::WelcomeController < AdminsBackofficeController - Filho

- Para que seja feita a validação se o usuário está logado no sistema é preciso adicionar uma action no controller Pai
before_action :authenticate_(nome_model)!
before_action :authenticate_admin!

- Removendo coisas (nomenclatura ficou errada, então é preciso refazer com nome correto)
rails d devise Profile (remove o devise profile)
rails d controller profiles_backoffice/welcome
rails d controller profiles_backoffice

- Criando com o nome correto
rails g devise User
rails g devise:views users
rails g controller users_backoffice/welcome
rails g controller users_backoffice

- Caso esqueca de Adicionar uma Action (Rota para determinada ação)
1º Adicione no controller filho o método (def index end)
2º Dentro da pasta adicione um arquivo com o nome do método (index.html.erb) >layouts/users_backoffice/index.html.erb
3º Coloque o conteúdo dentro do mesmo arquivo, Exp:
<h1>UsersBackoffice::Welcome#index</h1>
<p>Find me in app/views/users_backoffice/welcome/index.html.erb</p>
4º Arrume a rota em routes.rb
Done

- Criando rake task
rails g task <Nome  Acao>
rails g task dev setup
É necessário deixar este espaço para que fique no padrão correto, pois depois de gerado o resultado será rails g task dev::setup

Visualizando valores dentro de um objeto
- nome_objeto.inspect
Assim que for visualizado pode ser alterado para campo desejado
- nome_objeto.ID


Quando quiser criar um link com um método olhar em (link_app/rails/info/routes), ver o método e o path após isso é só colocar no app
- <%= link_to 'Menssagem', path, method: :nome_method %>
- <%= link_to 'Fazer logoof [usuário]', destroy_user_session_path, method: :delete %>

Toda esplicação necessária para migralção de templates no Rails está nesste artigo e vídeo
- https://videosdeti.com.br/post-video-migrando-um-template-html-para-o-ruby-on-rails/
Vale resaltar que é muito importante saber e utilizar a mesma versão dos plugins que são necessario de acordo com seu template
Exp: Udemy/RubyOnRails5-DoInicioAoFim/time_to_answer/public/templates/startbootstrap-sb-admin-2/vendor/bootstrap/scss/bootstrap.scss
Tem a definição de qual versão está sendo utilizada do BootStrap (Bootstrap v4.3.1 (https://getbootstrap.com/)) então utilizamos exatamente a mesma versão


https://colorlib.com/polygon/gentelella/
https://github.com/puikinsh/gentelella/

https://startbootstrap.com/template-overviews/sb-admin-2/

Instalar npm globalmente através do apt-get
sudo apt-get install npm

Instalar yarn globalmente através do npm
sudo npm install --global yarn

Dentro do projeto inicializar o yarn para fazer o controle de pacotes
- yarn init
Todas informações vinculadas a ele, é possível visualizar dentro:
   Pasta: node_modules
     Arquivo: package.json

Uma boa escolha é remover os turbolinks, pois as vezes ele pode conflitar com pacotes que foram instalados para isso:
- Comente a gem dentro de gemfile (gem 'turbolinks', '~> 5')
- Remova a requerimento dentro de assets/application.js (//= require turbolinks)
- Remova a requerimento view/layouts (
                                        media: 'all', 'data-turbolinks-track': 'reload'
                                        'data-turbolinks-track': 'reload'
                                     )

** Apagar os (*= require_tree), assim não é chamado todos os arquivos sendo eles css e javascript

ambos js
Chart.js v2.8.0
DataTables 1.10.19
metis menu 1.1.3

require font-awesome/css/font-awesome
*= require bootstrap/dist/css/bootstrap
*= href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet"

//= require @fortawesome/fontawesome-free/js/all
//= require metismenu/dist/metisMenu
//= require popper.js/dist/popper

- Importantdo um templete
1º Salva-lo dentro de Public/templates
2º Copiar todo html que desejar para a view que desejado
3º Separar CSS de javascript
4º Instalar todos as dependencias, nas VERSÕES CORRESPONDENTE (através do yarn)
5º Adicionar o path dentros dos assets
6º Fazer a alteração também dentro de Config/assets, para que haja a pré compilação
7º Caso haja algum template personalizado, copiar o arquivo e colocar dentro de lib/assets

Gem awesome-print
Possibilita a formatação de dados quando estamos trabalhando no console, ficando muito mais fácil a vizualização e interpretação dos retornados
- ap Model.atribute
- ap Admin.all

Criação de rotas - Resources
  namespace :admins_backoffice do
  # Utilizando Resources e delimitando-o
    get 'welcome/index' # Dashboard
    resources :admins, only: [:index] # Administradores

   # Criando as rotas a mão (não é viável pois não é dinâmico)
    get 'admins/index'
    get 'admins/edit/:id', to: 'admins#edit'
    Criando os resources a mão
  end

Form with, sempre que foi salvo algo na página há a necessidade de renderização podemos fazer assim
  form_with(model: [ name_space, variavel_instancia], local: true) - [local: true] determina a renderização ou update para ser feito com html
  form_with(model: [ :admins_backoffice, @admin], local: true)

Verificando se o Objeto possui algum erro ao tentar fazer o CRUD
  Objeto.erros
  Objeto.erros.any?
  Objeto.erros.full_messages

Para descobrir qual ação o rails está executando utilizamos
<%= action_name %>

Form with
 - Podemos padrão o form_with utiliza JavaScript, mas se quisermos trabalhar com HTML é necessário informar com local: true
Exmp
  <%= form_with(model: [ :admins_backoffice, @admin], local: true) do |form| %>

Lembrar sempre que toda partil, começa com "_"
Exmp: _form.html.erb

Renderizando uma partial
Exmp: Basta informar o caminho do arquivo, se deseja passar alguma informação podemos usar o parâmetro locals.
  <%= render partial: 'admins_backoffice/admins/shared/form',
             locals: { action_message: 'Novo'} %>

Criando uma Referência para outra tabela
- rails generate model nome_model atributo_model:tipo_atributo nome_model_referenciado:references
Exmp: rails g model question description:text subject:references
